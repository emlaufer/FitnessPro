package com.example.fitnesspro

import android.util.Log
import androidx.room.Room
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.platform.app.InstrumentationRegistry
import com.example.fitnesspro.database.FitnessDatabase
import com.example.fitnesspro.database.WeightDao
import com.example.fitnesspro.database.WeightEntity
import junit.framework.Assert.assertEquals
import junit.framework.Assert.assertNotNull
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import org.junit.After
import org.junit.Assert
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import java.io.IOException

@RunWith(AndroidJUnit4::class)
class DatabaseTest {
    private lateinit var weightDao: WeightDao
    private lateinit var db: FitnessDatabase

    @Before
    fun createDb() {
        Log.d("DATABASETEST", "Initializing db...")
        val context = InstrumentationRegistry.getInstrumentation().targetContext
        // Use in-memory database for testing...
        db = Room.inMemoryDatabaseBuilder(context, FitnessDatabase::class.java)
            .allowMainThreadQueries()
            .build()
        weightDao = db.weightDao
    }

    @After
    @Throws(IOException::class)
    fun closeDb() {
        Log.d("DATABASETEST", "Closing db...")
        db.close()
    }

    @Test
    @Throws(Exception::class)
    fun insertAndGetWeight() {
        val weight = WeightEntity()
        runBlocking {
            weightDao.insert(weight)
            val getBack = weightDao.getLastEntry()

            // ensure value equals (id wont because it was autoGenerated)
            assertEquals(weight.weight, getBack?.weight)
            assertEquals(weight.timestamp, getBack?.timestamp)
        }
    }

    @Test
    @Throws(Exception::class)
    fun insertWithId() {
        val weight = WeightEntity(1, 140.0, 4000)
        runBlocking {
            weightDao.insert(weight)
            val getBack = weightDao.get(weight.id)

            // ensure value equals (id wont because it was autoGenerated)
            assertEquals(weight.weight, getBack?.weight)
            assertEquals(weight.timestamp, getBack?.timestamp)
        }
    }

    @Test
    @Throws(Exception::class)
    fun update() {
        val weight = WeightEntity(1, 140.0, 4000)
        runBlocking {
            weightDao.insert(weight)
            var getBack = weightDao.get(weight.id)

            // ensure value equals (id wont because it was autoGenerated)
            assertEquals(weight.weight, getBack?.weight)
            assertEquals(weight.timestamp, getBack?.timestamp)

            // update the weight
            weight.weight = 150.4
            weight.timestamp = 2300
            weightDao.update(weight)
            getBack = weightDao.get(weight.id)

            // ensure value equals (id wont because it was autoGenerated)
            assertEquals(weight.weight, getBack?.weight)
            assertEquals(weight.timestamp, getBack?.timestamp)
        }
    }
}